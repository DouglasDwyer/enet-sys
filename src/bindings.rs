/* automatically generated by rust-bindgen 0.71.1 */

pub type USHORT = ::std::os::raw::c_ushort;
pub type UCHAR = ::std::os::raw::c_uchar;
pub type UINT_PTR = ::std::os::raw::c_ulonglong;
pub type u_int = ::std::os::raw::c_uint;
pub type SOCKET = UINT_PTR;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fd_set {
    pub fd_count: u_int,
    pub fd_array: [SOCKET; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fd_set"][::std::mem::size_of::<fd_set>() - 520usize];
    ["Alignment of fd_set"][::std::mem::align_of::<fd_set>() - 8usize];
    ["Offset of field: fd_set::fd_count"][::std::mem::offset_of!(fd_set, fd_count) - 0usize];
    ["Offset of field: fd_set::fd_array"][::std::mem::offset_of!(fd_set, fd_array) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub u: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub Byte: [UCHAR; 16usize],
    pub Word: [USHORT; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in6_addr__bindgen_ty_1"][::std::mem::size_of::<in6_addr__bindgen_ty_1>() - 16usize];
    ["Alignment of in6_addr__bindgen_ty_1"]
        [::std::mem::align_of::<in6_addr__bindgen_ty_1>() - 2usize];
    ["Offset of field: in6_addr__bindgen_ty_1::Byte"]
        [::std::mem::offset_of!(in6_addr__bindgen_ty_1, Byte) - 0usize];
    ["Offset of field: in6_addr__bindgen_ty_1::Word"]
        [::std::mem::offset_of!(in6_addr__bindgen_ty_1, Word) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in6_addr"][::std::mem::size_of::<in6_addr>() - 16usize];
    ["Alignment of in6_addr"][::std::mem::align_of::<in6_addr>() - 2usize];
    ["Offset of field: in6_addr::u"][::std::mem::offset_of!(in6_addr, u) - 0usize];
};
pub type ENetSocket = SOCKET;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ENetBuffer {
    pub dataLength: usize,
    pub data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ENetBuffer"][::std::mem::size_of::<ENetBuffer>() - 16usize];
    ["Alignment of ENetBuffer"][::std::mem::align_of::<ENetBuffer>() - 8usize];
    ["Offset of field: ENetBuffer::dataLength"]
        [::std::mem::offset_of!(ENetBuffer, dataLength) - 0usize];
    ["Offset of field: ENetBuffer::data"][::std::mem::offset_of!(ENetBuffer, data) - 8usize];
};
pub type ENetSocketSet = fd_set;
pub type enet_uint8 = u8;
pub type enet_uint16 = u16;
pub type enet_uint32 = u32;
pub type enet_uint64 = u64;
pub type ENetVersion = enet_uint32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ENetCallbacks {
    pub malloc:
        ::std::option::Option<unsafe extern "C" fn(size: usize) -> *mut ::std::os::raw::c_void>,
    pub free: ::std::option::Option<unsafe extern "C" fn(memory: *mut ::std::os::raw::c_void)>,
    pub no_memory: ::std::option::Option<unsafe extern "C" fn()>,
    pub packet_create: ::std::option::Option<
        unsafe extern "C" fn(
            data: *const ::std::os::raw::c_void,
            dataLength: usize,
            flags: enet_uint32,
        ) -> *mut ENetPacket,
    >,
    pub packet_destroy: ::std::option::Option<unsafe extern "C" fn(packet: *mut ENetPacket)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ENetCallbacks"][::std::mem::size_of::<_ENetCallbacks>() - 40usize];
    ["Alignment of _ENetCallbacks"][::std::mem::align_of::<_ENetCallbacks>() - 8usize];
    ["Offset of field: _ENetCallbacks::malloc"]
        [::std::mem::offset_of!(_ENetCallbacks, malloc) - 0usize];
    ["Offset of field: _ENetCallbacks::free"]
        [::std::mem::offset_of!(_ENetCallbacks, free) - 8usize];
    ["Offset of field: _ENetCallbacks::no_memory"]
        [::std::mem::offset_of!(_ENetCallbacks, no_memory) - 16usize];
    ["Offset of field: _ENetCallbacks::packet_create"]
        [::std::mem::offset_of!(_ENetCallbacks, packet_create) - 24usize];
    ["Offset of field: _ENetCallbacks::packet_destroy"]
        [::std::mem::offset_of!(_ENetCallbacks, packet_destroy) - 32usize];
};
pub type ENetCallbacks = _ENetCallbacks;
unsafe extern "C" {
    pub fn enet_malloc(arg1: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn enet_free(arg1: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn enet_packet_create(
        arg1: *const ::std::os::raw::c_void,
        arg2: usize,
        arg3: enet_uint32,
    ) -> *mut ENetPacket;
}
unsafe extern "C" {
    pub fn enet_packet_resize(arg1: *mut ENetPacket, arg2: usize) -> *mut ENetPacket;
}
unsafe extern "C" {
    pub fn enet_packet_copy(arg1: *mut ENetPacket) -> *mut ENetPacket;
}
unsafe extern "C" {
    pub fn enet_packet_destroy(arg1: *mut ENetPacket);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ENetListNode {
    pub next: *mut _ENetListNode,
    pub previous: *mut _ENetListNode,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ENetListNode"][::std::mem::size_of::<_ENetListNode>() - 16usize];
    ["Alignment of _ENetListNode"][::std::mem::align_of::<_ENetListNode>() - 8usize];
    ["Offset of field: _ENetListNode::next"][::std::mem::offset_of!(_ENetListNode, next) - 0usize];
    ["Offset of field: _ENetListNode::previous"]
        [::std::mem::offset_of!(_ENetListNode, previous) - 8usize];
};
pub type ENetListNode = _ENetListNode;
pub type ENetListIterator = *mut ENetListNode;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ENetList {
    pub sentinel: ENetListNode,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ENetList"][::std::mem::size_of::<_ENetList>() - 16usize];
    ["Alignment of _ENetList"][::std::mem::align_of::<_ENetList>() - 8usize];
    ["Offset of field: _ENetList::sentinel"][::std::mem::offset_of!(_ENetList, sentinel) - 0usize];
};
pub type ENetList = _ENetList;
unsafe extern "C" {
    pub fn enet_list_insert(
        arg1: ENetListIterator,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ENetListIterator;
}
unsafe extern "C" {
    pub fn enet_list_move(
        arg1: ENetListIterator,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ENetListIterator;
}
unsafe extern "C" {
    pub fn enet_list_remove(arg1: ENetListIterator) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn enet_list_clear(arg1: *mut ENetList);
}
unsafe extern "C" {
    pub fn enet_list_size(arg1: *mut ENetList) -> usize;
}
pub const _ENetProtocolCommand_ENET_PROTOCOL_COMMAND_NONE: _ENetProtocolCommand = 0;
pub const _ENetProtocolCommand_ENET_PROTOCOL_COMMAND_ACKNOWLEDGE: _ENetProtocolCommand = 1;
pub const _ENetProtocolCommand_ENET_PROTOCOL_COMMAND_CONNECT: _ENetProtocolCommand = 2;
pub const _ENetProtocolCommand_ENET_PROTOCOL_COMMAND_VERIFY_CONNECT: _ENetProtocolCommand = 3;
pub const _ENetProtocolCommand_ENET_PROTOCOL_COMMAND_DISCONNECT: _ENetProtocolCommand = 4;
pub const _ENetProtocolCommand_ENET_PROTOCOL_COMMAND_PING: _ENetProtocolCommand = 5;
pub const _ENetProtocolCommand_ENET_PROTOCOL_COMMAND_SEND_RELIABLE: _ENetProtocolCommand = 6;
pub const _ENetProtocolCommand_ENET_PROTOCOL_COMMAND_SEND_UNRELIABLE: _ENetProtocolCommand = 7;
pub const _ENetProtocolCommand_ENET_PROTOCOL_COMMAND_SEND_FRAGMENT: _ENetProtocolCommand = 8;
pub const _ENetProtocolCommand_ENET_PROTOCOL_COMMAND_SEND_UNSEQUENCED: _ENetProtocolCommand = 9;
pub const _ENetProtocolCommand_ENET_PROTOCOL_COMMAND_BANDWIDTH_LIMIT: _ENetProtocolCommand = 10;
pub const _ENetProtocolCommand_ENET_PROTOCOL_COMMAND_THROTTLE_CONFIGURE: _ENetProtocolCommand = 11;
pub const _ENetProtocolCommand_ENET_PROTOCOL_COMMAND_SEND_UNRELIABLE_FRAGMENT:
    _ENetProtocolCommand = 12;
pub const _ENetProtocolCommand_ENET_PROTOCOL_COMMAND_COUNT: _ENetProtocolCommand = 13;
pub const _ENetProtocolCommand_ENET_PROTOCOL_COMMAND_MASK: _ENetProtocolCommand = 15;
pub type _ENetProtocolCommand = ::std::os::raw::c_int;
pub use self::_ENetProtocolCommand as ENetProtocolCommand;
pub const _ENetProtocolFlag_ENET_PROTOCOL_COMMAND_FLAG_ACKNOWLEDGE: _ENetProtocolFlag = 128;
pub const _ENetProtocolFlag_ENET_PROTOCOL_COMMAND_FLAG_UNSEQUENCED: _ENetProtocolFlag = 64;
pub const _ENetProtocolFlag_ENET_PROTOCOL_HEADER_FLAG_COMPRESSED: _ENetProtocolFlag = 16384;
pub const _ENetProtocolFlag_ENET_PROTOCOL_HEADER_FLAG_SENT_TIME: _ENetProtocolFlag = 32768;
pub const _ENetProtocolFlag_ENET_PROTOCOL_HEADER_FLAG_MASK: _ENetProtocolFlag = 49152;
pub const _ENetProtocolFlag_ENET_PROTOCOL_HEADER_SESSION_MASK: _ENetProtocolFlag = 12288;
pub const _ENetProtocolFlag_ENET_PROTOCOL_HEADER_SESSION_SHIFT: _ENetProtocolFlag = 12;
pub type _ENetProtocolFlag = ::std::os::raw::c_int;
pub use self::_ENetProtocolFlag as ENetProtocolFlag;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct _ENetProtocolHeader {
    pub peerID: enet_uint16,
    pub sentTime: enet_uint16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ENetProtocolHeader"][::std::mem::size_of::<_ENetProtocolHeader>() - 4usize];
    ["Alignment of _ENetProtocolHeader"][::std::mem::align_of::<_ENetProtocolHeader>() - 1usize];
    ["Offset of field: _ENetProtocolHeader::peerID"]
        [::std::mem::offset_of!(_ENetProtocolHeader, peerID) - 0usize];
    ["Offset of field: _ENetProtocolHeader::sentTime"]
        [::std::mem::offset_of!(_ENetProtocolHeader, sentTime) - 2usize];
};
pub type ENetProtocolHeader = _ENetProtocolHeader;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct _ENetProtocolHeaderMinimal {
    pub peerID: enet_uint16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ENetProtocolHeaderMinimal"]
        [::std::mem::size_of::<_ENetProtocolHeaderMinimal>() - 2usize];
    ["Alignment of _ENetProtocolHeaderMinimal"]
        [::std::mem::align_of::<_ENetProtocolHeaderMinimal>() - 1usize];
    ["Offset of field: _ENetProtocolHeaderMinimal::peerID"]
        [::std::mem::offset_of!(_ENetProtocolHeaderMinimal, peerID) - 0usize];
};
pub type ENetProtocolHeaderMinimal = _ENetProtocolHeaderMinimal;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct _ENetProtocolCommandHeader {
    pub command: enet_uint8,
    pub channelID: enet_uint8,
    pub reliableSequenceNumber: enet_uint16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ENetProtocolCommandHeader"]
        [::std::mem::size_of::<_ENetProtocolCommandHeader>() - 4usize];
    ["Alignment of _ENetProtocolCommandHeader"]
        [::std::mem::align_of::<_ENetProtocolCommandHeader>() - 1usize];
    ["Offset of field: _ENetProtocolCommandHeader::command"]
        [::std::mem::offset_of!(_ENetProtocolCommandHeader, command) - 0usize];
    ["Offset of field: _ENetProtocolCommandHeader::channelID"]
        [::std::mem::offset_of!(_ENetProtocolCommandHeader, channelID) - 1usize];
    ["Offset of field: _ENetProtocolCommandHeader::reliableSequenceNumber"]
        [::std::mem::offset_of!(_ENetProtocolCommandHeader, reliableSequenceNumber) - 2usize];
};
pub type ENetProtocolCommandHeader = _ENetProtocolCommandHeader;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct _ENetProtocolAcknowledge {
    pub header: ENetProtocolCommandHeader,
    pub receivedReliableSequenceNumber: enet_uint16,
    pub receivedSentTime: enet_uint16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ENetProtocolAcknowledge"]
        [::std::mem::size_of::<_ENetProtocolAcknowledge>() - 8usize];
    ["Alignment of _ENetProtocolAcknowledge"]
        [::std::mem::align_of::<_ENetProtocolAcknowledge>() - 1usize];
    ["Offset of field: _ENetProtocolAcknowledge::header"]
        [::std::mem::offset_of!(_ENetProtocolAcknowledge, header) - 0usize];
    ["Offset of field: _ENetProtocolAcknowledge::receivedReliableSequenceNumber"]
        [::std::mem::offset_of!(_ENetProtocolAcknowledge, receivedReliableSequenceNumber) - 4usize];
    ["Offset of field: _ENetProtocolAcknowledge::receivedSentTime"]
        [::std::mem::offset_of!(_ENetProtocolAcknowledge, receivedSentTime) - 6usize];
};
pub type ENetProtocolAcknowledge = _ENetProtocolAcknowledge;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct _ENetProtocolConnect {
    pub header: ENetProtocolCommandHeader,
    pub outgoingPeerID: enet_uint16,
    pub incomingSessionID: enet_uint8,
    pub outgoingSessionID: enet_uint8,
    pub mtu: enet_uint32,
    pub windowSize: enet_uint32,
    pub channelCount: enet_uint32,
    pub incomingBandwidth: enet_uint32,
    pub outgoingBandwidth: enet_uint32,
    pub packetThrottleInterval: enet_uint32,
    pub packetThrottleAcceleration: enet_uint32,
    pub packetThrottleDeceleration: enet_uint32,
    pub connectID: enet_uint32,
    pub data: enet_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ENetProtocolConnect"][::std::mem::size_of::<_ENetProtocolConnect>() - 48usize];
    ["Alignment of _ENetProtocolConnect"][::std::mem::align_of::<_ENetProtocolConnect>() - 1usize];
    ["Offset of field: _ENetProtocolConnect::header"]
        [::std::mem::offset_of!(_ENetProtocolConnect, header) - 0usize];
    ["Offset of field: _ENetProtocolConnect::outgoingPeerID"]
        [::std::mem::offset_of!(_ENetProtocolConnect, outgoingPeerID) - 4usize];
    ["Offset of field: _ENetProtocolConnect::incomingSessionID"]
        [::std::mem::offset_of!(_ENetProtocolConnect, incomingSessionID) - 6usize];
    ["Offset of field: _ENetProtocolConnect::outgoingSessionID"]
        [::std::mem::offset_of!(_ENetProtocolConnect, outgoingSessionID) - 7usize];
    ["Offset of field: _ENetProtocolConnect::mtu"]
        [::std::mem::offset_of!(_ENetProtocolConnect, mtu) - 8usize];
    ["Offset of field: _ENetProtocolConnect::windowSize"]
        [::std::mem::offset_of!(_ENetProtocolConnect, windowSize) - 12usize];
    ["Offset of field: _ENetProtocolConnect::channelCount"]
        [::std::mem::offset_of!(_ENetProtocolConnect, channelCount) - 16usize];
    ["Offset of field: _ENetProtocolConnect::incomingBandwidth"]
        [::std::mem::offset_of!(_ENetProtocolConnect, incomingBandwidth) - 20usize];
    ["Offset of field: _ENetProtocolConnect::outgoingBandwidth"]
        [::std::mem::offset_of!(_ENetProtocolConnect, outgoingBandwidth) - 24usize];
    ["Offset of field: _ENetProtocolConnect::packetThrottleInterval"]
        [::std::mem::offset_of!(_ENetProtocolConnect, packetThrottleInterval) - 28usize];
    ["Offset of field: _ENetProtocolConnect::packetThrottleAcceleration"]
        [::std::mem::offset_of!(_ENetProtocolConnect, packetThrottleAcceleration) - 32usize];
    ["Offset of field: _ENetProtocolConnect::packetThrottleDeceleration"]
        [::std::mem::offset_of!(_ENetProtocolConnect, packetThrottleDeceleration) - 36usize];
    ["Offset of field: _ENetProtocolConnect::connectID"]
        [::std::mem::offset_of!(_ENetProtocolConnect, connectID) - 40usize];
    ["Offset of field: _ENetProtocolConnect::data"]
        [::std::mem::offset_of!(_ENetProtocolConnect, data) - 44usize];
};
pub type ENetProtocolConnect = _ENetProtocolConnect;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct _ENetProtocolVerifyConnect {
    pub header: ENetProtocolCommandHeader,
    pub outgoingPeerID: enet_uint16,
    pub incomingSessionID: enet_uint8,
    pub outgoingSessionID: enet_uint8,
    pub mtu: enet_uint32,
    pub windowSize: enet_uint32,
    pub channelCount: enet_uint32,
    pub incomingBandwidth: enet_uint32,
    pub outgoingBandwidth: enet_uint32,
    pub packetThrottleInterval: enet_uint32,
    pub packetThrottleAcceleration: enet_uint32,
    pub packetThrottleDeceleration: enet_uint32,
    pub connectID: enet_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ENetProtocolVerifyConnect"]
        [::std::mem::size_of::<_ENetProtocolVerifyConnect>() - 44usize];
    ["Alignment of _ENetProtocolVerifyConnect"]
        [::std::mem::align_of::<_ENetProtocolVerifyConnect>() - 1usize];
    ["Offset of field: _ENetProtocolVerifyConnect::header"]
        [::std::mem::offset_of!(_ENetProtocolVerifyConnect, header) - 0usize];
    ["Offset of field: _ENetProtocolVerifyConnect::outgoingPeerID"]
        [::std::mem::offset_of!(_ENetProtocolVerifyConnect, outgoingPeerID) - 4usize];
    ["Offset of field: _ENetProtocolVerifyConnect::incomingSessionID"]
        [::std::mem::offset_of!(_ENetProtocolVerifyConnect, incomingSessionID) - 6usize];
    ["Offset of field: _ENetProtocolVerifyConnect::outgoingSessionID"]
        [::std::mem::offset_of!(_ENetProtocolVerifyConnect, outgoingSessionID) - 7usize];
    ["Offset of field: _ENetProtocolVerifyConnect::mtu"]
        [::std::mem::offset_of!(_ENetProtocolVerifyConnect, mtu) - 8usize];
    ["Offset of field: _ENetProtocolVerifyConnect::windowSize"]
        [::std::mem::offset_of!(_ENetProtocolVerifyConnect, windowSize) - 12usize];
    ["Offset of field: _ENetProtocolVerifyConnect::channelCount"]
        [::std::mem::offset_of!(_ENetProtocolVerifyConnect, channelCount) - 16usize];
    ["Offset of field: _ENetProtocolVerifyConnect::incomingBandwidth"]
        [::std::mem::offset_of!(_ENetProtocolVerifyConnect, incomingBandwidth) - 20usize];
    ["Offset of field: _ENetProtocolVerifyConnect::outgoingBandwidth"]
        [::std::mem::offset_of!(_ENetProtocolVerifyConnect, outgoingBandwidth) - 24usize];
    ["Offset of field: _ENetProtocolVerifyConnect::packetThrottleInterval"]
        [::std::mem::offset_of!(_ENetProtocolVerifyConnect, packetThrottleInterval) - 28usize];
    ["Offset of field: _ENetProtocolVerifyConnect::packetThrottleAcceleration"]
        [::std::mem::offset_of!(_ENetProtocolVerifyConnect, packetThrottleAcceleration) - 32usize];
    ["Offset of field: _ENetProtocolVerifyConnect::packetThrottleDeceleration"]
        [::std::mem::offset_of!(_ENetProtocolVerifyConnect, packetThrottleDeceleration) - 36usize];
    ["Offset of field: _ENetProtocolVerifyConnect::connectID"]
        [::std::mem::offset_of!(_ENetProtocolVerifyConnect, connectID) - 40usize];
};
pub type ENetProtocolVerifyConnect = _ENetProtocolVerifyConnect;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct _ENetProtocolBandwidthLimit {
    pub header: ENetProtocolCommandHeader,
    pub incomingBandwidth: enet_uint32,
    pub outgoingBandwidth: enet_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ENetProtocolBandwidthLimit"]
        [::std::mem::size_of::<_ENetProtocolBandwidthLimit>() - 12usize];
    ["Alignment of _ENetProtocolBandwidthLimit"]
        [::std::mem::align_of::<_ENetProtocolBandwidthLimit>() - 1usize];
    ["Offset of field: _ENetProtocolBandwidthLimit::header"]
        [::std::mem::offset_of!(_ENetProtocolBandwidthLimit, header) - 0usize];
    ["Offset of field: _ENetProtocolBandwidthLimit::incomingBandwidth"]
        [::std::mem::offset_of!(_ENetProtocolBandwidthLimit, incomingBandwidth) - 4usize];
    ["Offset of field: _ENetProtocolBandwidthLimit::outgoingBandwidth"]
        [::std::mem::offset_of!(_ENetProtocolBandwidthLimit, outgoingBandwidth) - 8usize];
};
pub type ENetProtocolBandwidthLimit = _ENetProtocolBandwidthLimit;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct _ENetProtocolThrottleConfigure {
    pub header: ENetProtocolCommandHeader,
    pub packetThrottleInterval: enet_uint32,
    pub packetThrottleAcceleration: enet_uint32,
    pub packetThrottleDeceleration: enet_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ENetProtocolThrottleConfigure"]
        [::std::mem::size_of::<_ENetProtocolThrottleConfigure>() - 16usize];
    ["Alignment of _ENetProtocolThrottleConfigure"]
        [::std::mem::align_of::<_ENetProtocolThrottleConfigure>() - 1usize];
    ["Offset of field: _ENetProtocolThrottleConfigure::header"]
        [::std::mem::offset_of!(_ENetProtocolThrottleConfigure, header) - 0usize];
    ["Offset of field: _ENetProtocolThrottleConfigure::packetThrottleInterval"]
        [::std::mem::offset_of!(_ENetProtocolThrottleConfigure, packetThrottleInterval) - 4usize];
    ["Offset of field: _ENetProtocolThrottleConfigure::packetThrottleAcceleration"][::std::mem::offset_of!(
        _ENetProtocolThrottleConfigure,
        packetThrottleAcceleration
    ) - 8usize];
    ["Offset of field: _ENetProtocolThrottleConfigure::packetThrottleDeceleration"][::std::mem::offset_of!(
        _ENetProtocolThrottleConfigure,
        packetThrottleDeceleration
    ) - 12usize];
};
pub type ENetProtocolThrottleConfigure = _ENetProtocolThrottleConfigure;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct _ENetProtocolDisconnect {
    pub header: ENetProtocolCommandHeader,
    pub data: enet_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ENetProtocolDisconnect"][::std::mem::size_of::<_ENetProtocolDisconnect>() - 8usize];
    ["Alignment of _ENetProtocolDisconnect"]
        [::std::mem::align_of::<_ENetProtocolDisconnect>() - 1usize];
    ["Offset of field: _ENetProtocolDisconnect::header"]
        [::std::mem::offset_of!(_ENetProtocolDisconnect, header) - 0usize];
    ["Offset of field: _ENetProtocolDisconnect::data"]
        [::std::mem::offset_of!(_ENetProtocolDisconnect, data) - 4usize];
};
pub type ENetProtocolDisconnect = _ENetProtocolDisconnect;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ENetProtocolPing {
    pub header: ENetProtocolCommandHeader,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ENetProtocolPing"][::std::mem::size_of::<_ENetProtocolPing>() - 4usize];
    ["Alignment of _ENetProtocolPing"][::std::mem::align_of::<_ENetProtocolPing>() - 1usize];
    ["Offset of field: _ENetProtocolPing::header"]
        [::std::mem::offset_of!(_ENetProtocolPing, header) - 0usize];
};
pub type ENetProtocolPing = _ENetProtocolPing;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct _ENetProtocolSendReliable {
    pub header: ENetProtocolCommandHeader,
    pub dataLength: enet_uint16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ENetProtocolSendReliable"]
        [::std::mem::size_of::<_ENetProtocolSendReliable>() - 6usize];
    ["Alignment of _ENetProtocolSendReliable"]
        [::std::mem::align_of::<_ENetProtocolSendReliable>() - 1usize];
    ["Offset of field: _ENetProtocolSendReliable::header"]
        [::std::mem::offset_of!(_ENetProtocolSendReliable, header) - 0usize];
    ["Offset of field: _ENetProtocolSendReliable::dataLength"]
        [::std::mem::offset_of!(_ENetProtocolSendReliable, dataLength) - 4usize];
};
pub type ENetProtocolSendReliable = _ENetProtocolSendReliable;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct _ENetProtocolSendUnreliable {
    pub header: ENetProtocolCommandHeader,
    pub unreliableSequenceNumber: enet_uint16,
    pub dataLength: enet_uint16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ENetProtocolSendUnreliable"]
        [::std::mem::size_of::<_ENetProtocolSendUnreliable>() - 8usize];
    ["Alignment of _ENetProtocolSendUnreliable"]
        [::std::mem::align_of::<_ENetProtocolSendUnreliable>() - 1usize];
    ["Offset of field: _ENetProtocolSendUnreliable::header"]
        [::std::mem::offset_of!(_ENetProtocolSendUnreliable, header) - 0usize];
    ["Offset of field: _ENetProtocolSendUnreliable::unreliableSequenceNumber"]
        [::std::mem::offset_of!(_ENetProtocolSendUnreliable, unreliableSequenceNumber) - 4usize];
    ["Offset of field: _ENetProtocolSendUnreliable::dataLength"]
        [::std::mem::offset_of!(_ENetProtocolSendUnreliable, dataLength) - 6usize];
};
pub type ENetProtocolSendUnreliable = _ENetProtocolSendUnreliable;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct _ENetProtocolSendUnsequenced {
    pub header: ENetProtocolCommandHeader,
    pub unsequencedGroup: enet_uint16,
    pub dataLength: enet_uint16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ENetProtocolSendUnsequenced"]
        [::std::mem::size_of::<_ENetProtocolSendUnsequenced>() - 8usize];
    ["Alignment of _ENetProtocolSendUnsequenced"]
        [::std::mem::align_of::<_ENetProtocolSendUnsequenced>() - 1usize];
    ["Offset of field: _ENetProtocolSendUnsequenced::header"]
        [::std::mem::offset_of!(_ENetProtocolSendUnsequenced, header) - 0usize];
    ["Offset of field: _ENetProtocolSendUnsequenced::unsequencedGroup"]
        [::std::mem::offset_of!(_ENetProtocolSendUnsequenced, unsequencedGroup) - 4usize];
    ["Offset of field: _ENetProtocolSendUnsequenced::dataLength"]
        [::std::mem::offset_of!(_ENetProtocolSendUnsequenced, dataLength) - 6usize];
};
pub type ENetProtocolSendUnsequenced = _ENetProtocolSendUnsequenced;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct _ENetProtocolSendFragment {
    pub header: ENetProtocolCommandHeader,
    pub startSequenceNumber: enet_uint16,
    pub dataLength: enet_uint16,
    pub fragmentCount: enet_uint32,
    pub fragmentNumber: enet_uint32,
    pub totalLength: enet_uint32,
    pub fragmentOffset: enet_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ENetProtocolSendFragment"]
        [::std::mem::size_of::<_ENetProtocolSendFragment>() - 24usize];
    ["Alignment of _ENetProtocolSendFragment"]
        [::std::mem::align_of::<_ENetProtocolSendFragment>() - 1usize];
    ["Offset of field: _ENetProtocolSendFragment::header"]
        [::std::mem::offset_of!(_ENetProtocolSendFragment, header) - 0usize];
    ["Offset of field: _ENetProtocolSendFragment::startSequenceNumber"]
        [::std::mem::offset_of!(_ENetProtocolSendFragment, startSequenceNumber) - 4usize];
    ["Offset of field: _ENetProtocolSendFragment::dataLength"]
        [::std::mem::offset_of!(_ENetProtocolSendFragment, dataLength) - 6usize];
    ["Offset of field: _ENetProtocolSendFragment::fragmentCount"]
        [::std::mem::offset_of!(_ENetProtocolSendFragment, fragmentCount) - 8usize];
    ["Offset of field: _ENetProtocolSendFragment::fragmentNumber"]
        [::std::mem::offset_of!(_ENetProtocolSendFragment, fragmentNumber) - 12usize];
    ["Offset of field: _ENetProtocolSendFragment::totalLength"]
        [::std::mem::offset_of!(_ENetProtocolSendFragment, totalLength) - 16usize];
    ["Offset of field: _ENetProtocolSendFragment::fragmentOffset"]
        [::std::mem::offset_of!(_ENetProtocolSendFragment, fragmentOffset) - 20usize];
};
pub type ENetProtocolSendFragment = _ENetProtocolSendFragment;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _ENetProtocol {
    pub header: ENetProtocolCommandHeader,
    pub acknowledge: ENetProtocolAcknowledge,
    pub connect: ENetProtocolConnect,
    pub verifyConnect: ENetProtocolVerifyConnect,
    pub disconnect: ENetProtocolDisconnect,
    pub ping: ENetProtocolPing,
    pub sendReliable: ENetProtocolSendReliable,
    pub sendUnreliable: ENetProtocolSendUnreliable,
    pub sendUnsequenced: ENetProtocolSendUnsequenced,
    pub sendFragment: ENetProtocolSendFragment,
    pub bandwidthLimit: ENetProtocolBandwidthLimit,
    pub throttleConfigure: ENetProtocolThrottleConfigure,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ENetProtocol"][::std::mem::size_of::<_ENetProtocol>() - 48usize];
    ["Alignment of _ENetProtocol"][::std::mem::align_of::<_ENetProtocol>() - 1usize];
    ["Offset of field: _ENetProtocol::header"]
        [::std::mem::offset_of!(_ENetProtocol, header) - 0usize];
    ["Offset of field: _ENetProtocol::acknowledge"]
        [::std::mem::offset_of!(_ENetProtocol, acknowledge) - 0usize];
    ["Offset of field: _ENetProtocol::connect"]
        [::std::mem::offset_of!(_ENetProtocol, connect) - 0usize];
    ["Offset of field: _ENetProtocol::verifyConnect"]
        [::std::mem::offset_of!(_ENetProtocol, verifyConnect) - 0usize];
    ["Offset of field: _ENetProtocol::disconnect"]
        [::std::mem::offset_of!(_ENetProtocol, disconnect) - 0usize];
    ["Offset of field: _ENetProtocol::ping"][::std::mem::offset_of!(_ENetProtocol, ping) - 0usize];
    ["Offset of field: _ENetProtocol::sendReliable"]
        [::std::mem::offset_of!(_ENetProtocol, sendReliable) - 0usize];
    ["Offset of field: _ENetProtocol::sendUnreliable"]
        [::std::mem::offset_of!(_ENetProtocol, sendUnreliable) - 0usize];
    ["Offset of field: _ENetProtocol::sendUnsequenced"]
        [::std::mem::offset_of!(_ENetProtocol, sendUnsequenced) - 0usize];
    ["Offset of field: _ENetProtocol::sendFragment"]
        [::std::mem::offset_of!(_ENetProtocol, sendFragment) - 0usize];
    ["Offset of field: _ENetProtocol::bandwidthLimit"]
        [::std::mem::offset_of!(_ENetProtocol, bandwidthLimit) - 0usize];
    ["Offset of field: _ENetProtocol::throttleConfigure"]
        [::std::mem::offset_of!(_ENetProtocol, throttleConfigure) - 0usize];
};
pub type ENetProtocol = _ENetProtocol;
pub const _ENetSocketType_ENET_SOCKET_TYPE_STREAM: _ENetSocketType = 1;
pub const _ENetSocketType_ENET_SOCKET_TYPE_DATAGRAM: _ENetSocketType = 2;
pub type _ENetSocketType = ::std::os::raw::c_int;
pub use self::_ENetSocketType as ENetSocketType;
pub const _ENetSocketWait_ENET_SOCKET_WAIT_NONE: _ENetSocketWait = 0;
pub const _ENetSocketWait_ENET_SOCKET_WAIT_SEND: _ENetSocketWait = 1;
pub const _ENetSocketWait_ENET_SOCKET_WAIT_RECEIVE: _ENetSocketWait = 2;
pub const _ENetSocketWait_ENET_SOCKET_WAIT_INTERRUPT: _ENetSocketWait = 4;
pub type _ENetSocketWait = ::std::os::raw::c_int;
pub use self::_ENetSocketWait as ENetSocketWait;
pub const _ENetSocketOption_ENET_SOCKOPT_NONBLOCK: _ENetSocketOption = 1;
pub const _ENetSocketOption_ENET_SOCKOPT_BROADCAST: _ENetSocketOption = 2;
pub const _ENetSocketOption_ENET_SOCKOPT_RCVBUF: _ENetSocketOption = 3;
pub const _ENetSocketOption_ENET_SOCKOPT_SNDBUF: _ENetSocketOption = 4;
pub const _ENetSocketOption_ENET_SOCKOPT_REUSEADDR: _ENetSocketOption = 5;
pub const _ENetSocketOption_ENET_SOCKOPT_RCVTIMEO: _ENetSocketOption = 6;
pub const _ENetSocketOption_ENET_SOCKOPT_SNDTIMEO: _ENetSocketOption = 7;
pub const _ENetSocketOption_ENET_SOCKOPT_ERROR: _ENetSocketOption = 8;
pub const _ENetSocketOption_ENET_SOCKOPT_NODELAY: _ENetSocketOption = 9;
pub const _ENetSocketOption_ENET_SOCKOPT_IPV6_V6ONLY: _ENetSocketOption = 10;
pub type _ENetSocketOption = ::std::os::raw::c_int;
pub use self::_ENetSocketOption as ENetSocketOption;
pub const _ENetSocketShutdown_ENET_SOCKET_SHUTDOWN_READ: _ENetSocketShutdown = 0;
pub const _ENetSocketShutdown_ENET_SOCKET_SHUTDOWN_WRITE: _ENetSocketShutdown = 1;
pub const _ENetSocketShutdown_ENET_SOCKET_SHUTDOWN_READ_WRITE: _ENetSocketShutdown = 2;
pub type _ENetSocketShutdown = ::std::os::raw::c_int;
pub use self::_ENetSocketShutdown as ENetSocketShutdown;
#[doc = " Portable internet address structure.\n\n The host must be specified in network byte-order, and the port must be in host\n byte-order. The constant ENET_HOST_ANY may be used to specify the default\n server host. The constant ENET_HOST_BROADCAST may be used to specify the\n broadcast address (255.255.255.255).  This makes sense for enet_host_connect,\n but not for enet_host_create.  Once a server responds to a broadcast, the\n address is updated from ENET_HOST_BROADCAST to the server's actual IP address."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ENetAddress {
    pub host: in6_addr,
    pub port: enet_uint16,
    pub sin6_scope_id: enet_uint16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ENetAddress"][::std::mem::size_of::<_ENetAddress>() - 20usize];
    ["Alignment of _ENetAddress"][::std::mem::align_of::<_ENetAddress>() - 2usize];
    ["Offset of field: _ENetAddress::host"][::std::mem::offset_of!(_ENetAddress, host) - 0usize];
    ["Offset of field: _ENetAddress::port"][::std::mem::offset_of!(_ENetAddress, port) - 16usize];
    ["Offset of field: _ENetAddress::sin6_scope_id"]
        [::std::mem::offset_of!(_ENetAddress, sin6_scope_id) - 18usize];
};
#[doc = " Portable internet address structure.\n\n The host must be specified in network byte-order, and the port must be in host\n byte-order. The constant ENET_HOST_ANY may be used to specify the default\n server host. The constant ENET_HOST_BROADCAST may be used to specify the\n broadcast address (255.255.255.255).  This makes sense for enet_host_connect,\n but not for enet_host_create.  Once a server responds to a broadcast, the\n address is updated from ENET_HOST_BROADCAST to the server's actual IP address."]
pub type ENetAddress = _ENetAddress;
pub const _ENetPacketFlag_ENET_PACKET_FLAG_RELIABLE: _ENetPacketFlag = 1;
#[doc = " packet must be received by the target peer and resend attempts should be made until the packet is delivered"]
pub const _ENetPacketFlag_ENET_PACKET_FLAG_UNSEQUENCED: _ENetPacketFlag = 2;
#[doc = " packet will not be sequenced with other packets not supported for reliable packets"]
pub const _ENetPacketFlag_ENET_PACKET_FLAG_NO_ALLOCATE: _ENetPacketFlag = 4;
#[doc = " packet will not allocate data, and user must supply it instead"]
pub const _ENetPacketFlag_ENET_PACKET_FLAG_UNRELIABLE_FRAGMENT: _ENetPacketFlag = 8;
#[doc = " packet will be fragmented using unreliable (instead of reliable) sends if it exceeds the MTU"]
pub const _ENetPacketFlag_ENET_PACKET_FLAG_SENT: _ENetPacketFlag = 256;
#[doc = " Packet flag bit constants.\n\n The host must be specified in network byte-order, and the port must be in\n host byte-order. The constant ENET_HOST_ANY may be used to specify the\n default server host.\n\n @sa ENetPacket"]
pub type _ENetPacketFlag = ::std::os::raw::c_int;
#[doc = " Packet flag bit constants.\n\n The host must be specified in network byte-order, and the port must be in\n host byte-order. The constant ENET_HOST_ANY may be used to specify the\n default server host.\n\n @sa ENetPacket"]
pub use self::_ENetPacketFlag as ENetPacketFlag;
pub type ENetPacketFreeCallback =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ENetAcknowledgement {
    pub acknowledgementList: ENetListNode,
    pub sentTime: enet_uint32,
    pub command: ENetProtocol,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ENetAcknowledgement"][::std::mem::size_of::<_ENetAcknowledgement>() - 72usize];
    ["Alignment of _ENetAcknowledgement"][::std::mem::align_of::<_ENetAcknowledgement>() - 8usize];
    ["Offset of field: _ENetAcknowledgement::acknowledgementList"]
        [::std::mem::offset_of!(_ENetAcknowledgement, acknowledgementList) - 0usize];
    ["Offset of field: _ENetAcknowledgement::sentTime"]
        [::std::mem::offset_of!(_ENetAcknowledgement, sentTime) - 16usize];
    ["Offset of field: _ENetAcknowledgement::command"]
        [::std::mem::offset_of!(_ENetAcknowledgement, command) - 20usize];
};
pub type ENetAcknowledgement = _ENetAcknowledgement;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ENetOutgoingCommand {
    pub outgoingCommandList: ENetListNode,
    pub reliableSequenceNumber: enet_uint16,
    pub unreliableSequenceNumber: enet_uint16,
    pub sentTime: enet_uint32,
    pub roundTripTimeout: enet_uint32,
    pub roundTripTimeoutLimit: enet_uint32,
    pub fragmentOffset: enet_uint32,
    pub fragmentLength: enet_uint16,
    pub sendAttempts: enet_uint16,
    pub command: ENetProtocol,
    pub packet: *mut ENetPacket,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ENetOutgoingCommand"][::std::mem::size_of::<_ENetOutgoingCommand>() - 96usize];
    ["Alignment of _ENetOutgoingCommand"][::std::mem::align_of::<_ENetOutgoingCommand>() - 8usize];
    ["Offset of field: _ENetOutgoingCommand::outgoingCommandList"]
        [::std::mem::offset_of!(_ENetOutgoingCommand, outgoingCommandList) - 0usize];
    ["Offset of field: _ENetOutgoingCommand::reliableSequenceNumber"]
        [::std::mem::offset_of!(_ENetOutgoingCommand, reliableSequenceNumber) - 16usize];
    ["Offset of field: _ENetOutgoingCommand::unreliableSequenceNumber"]
        [::std::mem::offset_of!(_ENetOutgoingCommand, unreliableSequenceNumber) - 18usize];
    ["Offset of field: _ENetOutgoingCommand::sentTime"]
        [::std::mem::offset_of!(_ENetOutgoingCommand, sentTime) - 20usize];
    ["Offset of field: _ENetOutgoingCommand::roundTripTimeout"]
        [::std::mem::offset_of!(_ENetOutgoingCommand, roundTripTimeout) - 24usize];
    ["Offset of field: _ENetOutgoingCommand::roundTripTimeoutLimit"]
        [::std::mem::offset_of!(_ENetOutgoingCommand, roundTripTimeoutLimit) - 28usize];
    ["Offset of field: _ENetOutgoingCommand::fragmentOffset"]
        [::std::mem::offset_of!(_ENetOutgoingCommand, fragmentOffset) - 32usize];
    ["Offset of field: _ENetOutgoingCommand::fragmentLength"]
        [::std::mem::offset_of!(_ENetOutgoingCommand, fragmentLength) - 36usize];
    ["Offset of field: _ENetOutgoingCommand::sendAttempts"]
        [::std::mem::offset_of!(_ENetOutgoingCommand, sendAttempts) - 38usize];
    ["Offset of field: _ENetOutgoingCommand::command"]
        [::std::mem::offset_of!(_ENetOutgoingCommand, command) - 40usize];
    ["Offset of field: _ENetOutgoingCommand::packet"]
        [::std::mem::offset_of!(_ENetOutgoingCommand, packet) - 88usize];
};
pub type ENetOutgoingCommand = _ENetOutgoingCommand;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ENetIncomingCommand {
    pub incomingCommandList: ENetListNode,
    pub reliableSequenceNumber: enet_uint16,
    pub unreliableSequenceNumber: enet_uint16,
    pub command: ENetProtocol,
    pub fragmentCount: enet_uint32,
    pub fragmentsRemaining: enet_uint32,
    pub fragments: *mut enet_uint32,
    pub packet: *mut ENetPacket,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ENetIncomingCommand"][::std::mem::size_of::<_ENetIncomingCommand>() - 96usize];
    ["Alignment of _ENetIncomingCommand"][::std::mem::align_of::<_ENetIncomingCommand>() - 8usize];
    ["Offset of field: _ENetIncomingCommand::incomingCommandList"]
        [::std::mem::offset_of!(_ENetIncomingCommand, incomingCommandList) - 0usize];
    ["Offset of field: _ENetIncomingCommand::reliableSequenceNumber"]
        [::std::mem::offset_of!(_ENetIncomingCommand, reliableSequenceNumber) - 16usize];
    ["Offset of field: _ENetIncomingCommand::unreliableSequenceNumber"]
        [::std::mem::offset_of!(_ENetIncomingCommand, unreliableSequenceNumber) - 18usize];
    ["Offset of field: _ENetIncomingCommand::command"]
        [::std::mem::offset_of!(_ENetIncomingCommand, command) - 20usize];
    ["Offset of field: _ENetIncomingCommand::fragmentCount"]
        [::std::mem::offset_of!(_ENetIncomingCommand, fragmentCount) - 68usize];
    ["Offset of field: _ENetIncomingCommand::fragmentsRemaining"]
        [::std::mem::offset_of!(_ENetIncomingCommand, fragmentsRemaining) - 72usize];
    ["Offset of field: _ENetIncomingCommand::fragments"]
        [::std::mem::offset_of!(_ENetIncomingCommand, fragments) - 80usize];
    ["Offset of field: _ENetIncomingCommand::packet"]
        [::std::mem::offset_of!(_ENetIncomingCommand, packet) - 88usize];
};
pub type ENetIncomingCommand = _ENetIncomingCommand;
pub const _ENetPeerState_ENET_PEER_STATE_DISCONNECTED: _ENetPeerState = 0;
pub const _ENetPeerState_ENET_PEER_STATE_CONNECTING: _ENetPeerState = 1;
pub const _ENetPeerState_ENET_PEER_STATE_ACKNOWLEDGING_CONNECT: _ENetPeerState = 2;
pub const _ENetPeerState_ENET_PEER_STATE_CONNECTION_PENDING: _ENetPeerState = 3;
pub const _ENetPeerState_ENET_PEER_STATE_CONNECTION_SUCCEEDED: _ENetPeerState = 4;
pub const _ENetPeerState_ENET_PEER_STATE_CONNECTED: _ENetPeerState = 5;
pub const _ENetPeerState_ENET_PEER_STATE_DISCONNECT_LATER: _ENetPeerState = 6;
pub const _ENetPeerState_ENET_PEER_STATE_DISCONNECTING: _ENetPeerState = 7;
pub const _ENetPeerState_ENET_PEER_STATE_ACKNOWLEDGING_DISCONNECT: _ENetPeerState = 8;
pub const _ENetPeerState_ENET_PEER_STATE_ZOMBIE: _ENetPeerState = 9;
pub type _ENetPeerState = ::std::os::raw::c_int;
pub use self::_ENetPeerState as ENetPeerState;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ENetChannel {
    pub outgoingReliableSequenceNumber: enet_uint16,
    pub outgoingUnreliableSequenceNumber: enet_uint16,
    pub usedReliableWindows: enet_uint16,
    pub reliableWindows: [enet_uint16; 16usize],
    pub incomingReliableSequenceNumber: enet_uint16,
    pub incomingUnreliableSequenceNumber: enet_uint16,
    pub incomingReliableCommands: ENetList,
    pub incomingUnreliableCommands: ENetList,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ENetChannel"][::std::mem::size_of::<_ENetChannel>() - 80usize];
    ["Alignment of _ENetChannel"][::std::mem::align_of::<_ENetChannel>() - 8usize];
    ["Offset of field: _ENetChannel::outgoingReliableSequenceNumber"]
        [::std::mem::offset_of!(_ENetChannel, outgoingReliableSequenceNumber) - 0usize];
    ["Offset of field: _ENetChannel::outgoingUnreliableSequenceNumber"]
        [::std::mem::offset_of!(_ENetChannel, outgoingUnreliableSequenceNumber) - 2usize];
    ["Offset of field: _ENetChannel::usedReliableWindows"]
        [::std::mem::offset_of!(_ENetChannel, usedReliableWindows) - 4usize];
    ["Offset of field: _ENetChannel::reliableWindows"]
        [::std::mem::offset_of!(_ENetChannel, reliableWindows) - 6usize];
    ["Offset of field: _ENetChannel::incomingReliableSequenceNumber"]
        [::std::mem::offset_of!(_ENetChannel, incomingReliableSequenceNumber) - 38usize];
    ["Offset of field: _ENetChannel::incomingUnreliableSequenceNumber"]
        [::std::mem::offset_of!(_ENetChannel, incomingUnreliableSequenceNumber) - 40usize];
    ["Offset of field: _ENetChannel::incomingReliableCommands"]
        [::std::mem::offset_of!(_ENetChannel, incomingReliableCommands) - 48usize];
    ["Offset of field: _ENetChannel::incomingUnreliableCommands"]
        [::std::mem::offset_of!(_ENetChannel, incomingUnreliableCommands) - 64usize];
};
pub type ENetChannel = _ENetChannel;
#[doc = " An ENet peer which data packets may be sent or received from.\n\n No fields should be modified unless otherwise specified."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ENetPeer {
    pub dispatchList: ENetListNode,
    pub host: *mut _ENetHost,
    pub outgoingPeerID: enet_uint16,
    pub incomingPeerID: enet_uint16,
    pub connectID: enet_uint32,
    pub outgoingSessionID: enet_uint8,
    pub incomingSessionID: enet_uint8,
    #[doc = "< Internet address of the peer"]
    pub address: ENetAddress,
    #[doc = "< Application private data, may be freely modified"]
    pub data: *mut ::std::os::raw::c_void,
    pub state: ENetPeerState,
    pub channels: *mut ENetChannel,
    #[doc = "< Number of channels allocated for communication with peer"]
    pub channelCount: usize,
    #[doc = "< Downstream bandwidth of the client in bytes/second"]
    pub incomingBandwidth: enet_uint32,
    #[doc = "< Upstream bandwidth of the client in bytes/second"]
    pub outgoingBandwidth: enet_uint32,
    pub incomingBandwidthThrottleEpoch: enet_uint32,
    pub outgoingBandwidthThrottleEpoch: enet_uint32,
    pub incomingDataTotal: enet_uint32,
    pub totalDataReceived: enet_uint64,
    pub outgoingDataTotal: enet_uint32,
    pub totalDataSent: enet_uint64,
    pub lastSendTime: enet_uint32,
    pub lastReceiveTime: enet_uint32,
    pub nextTimeout: enet_uint32,
    pub earliestTimeout: enet_uint32,
    pub packetLossEpoch: enet_uint32,
    pub packetsSent: enet_uint32,
    #[doc = "< total number of packets sent during a session"]
    pub totalPacketsSent: enet_uint64,
    pub packetsLost: enet_uint32,
    #[doc = "< total number of packets lost during a session"]
    pub totalPacketsLost: enet_uint32,
    #[doc = "< mean packet loss of reliable packets as a ratio with respect to the constant ENET_PEER_PACKET_LOSS_SCALE"]
    pub packetLoss: enet_uint32,
    pub packetLossVariance: enet_uint32,
    pub packetThrottle: enet_uint32,
    pub packetThrottleLimit: enet_uint32,
    pub packetThrottleCounter: enet_uint32,
    pub packetThrottleEpoch: enet_uint32,
    pub packetThrottleAcceleration: enet_uint32,
    pub packetThrottleDeceleration: enet_uint32,
    pub packetThrottleInterval: enet_uint32,
    pub pingInterval: enet_uint32,
    pub timeoutLimit: enet_uint32,
    pub timeoutMinimum: enet_uint32,
    pub timeoutMaximum: enet_uint32,
    pub lastRoundTripTime: enet_uint32,
    pub lowestRoundTripTime: enet_uint32,
    pub lastRoundTripTimeVariance: enet_uint32,
    pub highestRoundTripTimeVariance: enet_uint32,
    #[doc = "< mean round trip time (RTT), in milliseconds, between sending a reliable packet and receiving its acknowledgement"]
    pub roundTripTime: enet_uint32,
    pub roundTripTimeVariance: enet_uint32,
    pub mtu: enet_uint32,
    pub windowSize: enet_uint32,
    pub reliableDataInTransit: enet_uint32,
    pub outgoingReliableSequenceNumber: enet_uint16,
    pub acknowledgements: ENetList,
    pub sentReliableCommands: ENetList,
    pub sentUnreliableCommands: ENetList,
    pub outgoingReliableCommands: ENetList,
    pub outgoingUnreliableCommands: ENetList,
    pub dispatchedCommands: ENetList,
    pub needsDispatch: ::std::os::raw::c_int,
    pub incomingUnsequencedGroup: enet_uint16,
    pub outgoingUnsequencedGroup: enet_uint16,
    pub unsequencedWindow: [enet_uint32; 32usize],
    pub eventData: enet_uint32,
    pub totalWaitingData: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ENetPeer"][::std::mem::size_of::<_ENetPeer>() - 520usize];
    ["Alignment of _ENetPeer"][::std::mem::align_of::<_ENetPeer>() - 8usize];
    ["Offset of field: _ENetPeer::dispatchList"]
        [::std::mem::offset_of!(_ENetPeer, dispatchList) - 0usize];
    ["Offset of field: _ENetPeer::host"][::std::mem::offset_of!(_ENetPeer, host) - 16usize];
    ["Offset of field: _ENetPeer::outgoingPeerID"]
        [::std::mem::offset_of!(_ENetPeer, outgoingPeerID) - 24usize];
    ["Offset of field: _ENetPeer::incomingPeerID"]
        [::std::mem::offset_of!(_ENetPeer, incomingPeerID) - 26usize];
    ["Offset of field: _ENetPeer::connectID"]
        [::std::mem::offset_of!(_ENetPeer, connectID) - 28usize];
    ["Offset of field: _ENetPeer::outgoingSessionID"]
        [::std::mem::offset_of!(_ENetPeer, outgoingSessionID) - 32usize];
    ["Offset of field: _ENetPeer::incomingSessionID"]
        [::std::mem::offset_of!(_ENetPeer, incomingSessionID) - 33usize];
    ["Offset of field: _ENetPeer::address"][::std::mem::offset_of!(_ENetPeer, address) - 34usize];
    ["Offset of field: _ENetPeer::data"][::std::mem::offset_of!(_ENetPeer, data) - 56usize];
    ["Offset of field: _ENetPeer::state"][::std::mem::offset_of!(_ENetPeer, state) - 64usize];
    ["Offset of field: _ENetPeer::channels"][::std::mem::offset_of!(_ENetPeer, channels) - 72usize];
    ["Offset of field: _ENetPeer::channelCount"]
        [::std::mem::offset_of!(_ENetPeer, channelCount) - 80usize];
    ["Offset of field: _ENetPeer::incomingBandwidth"]
        [::std::mem::offset_of!(_ENetPeer, incomingBandwidth) - 88usize];
    ["Offset of field: _ENetPeer::outgoingBandwidth"]
        [::std::mem::offset_of!(_ENetPeer, outgoingBandwidth) - 92usize];
    ["Offset of field: _ENetPeer::incomingBandwidthThrottleEpoch"]
        [::std::mem::offset_of!(_ENetPeer, incomingBandwidthThrottleEpoch) - 96usize];
    ["Offset of field: _ENetPeer::outgoingBandwidthThrottleEpoch"]
        [::std::mem::offset_of!(_ENetPeer, outgoingBandwidthThrottleEpoch) - 100usize];
    ["Offset of field: _ENetPeer::incomingDataTotal"]
        [::std::mem::offset_of!(_ENetPeer, incomingDataTotal) - 104usize];
    ["Offset of field: _ENetPeer::totalDataReceived"]
        [::std::mem::offset_of!(_ENetPeer, totalDataReceived) - 112usize];
    ["Offset of field: _ENetPeer::outgoingDataTotal"]
        [::std::mem::offset_of!(_ENetPeer, outgoingDataTotal) - 120usize];
    ["Offset of field: _ENetPeer::totalDataSent"]
        [::std::mem::offset_of!(_ENetPeer, totalDataSent) - 128usize];
    ["Offset of field: _ENetPeer::lastSendTime"]
        [::std::mem::offset_of!(_ENetPeer, lastSendTime) - 136usize];
    ["Offset of field: _ENetPeer::lastReceiveTime"]
        [::std::mem::offset_of!(_ENetPeer, lastReceiveTime) - 140usize];
    ["Offset of field: _ENetPeer::nextTimeout"]
        [::std::mem::offset_of!(_ENetPeer, nextTimeout) - 144usize];
    ["Offset of field: _ENetPeer::earliestTimeout"]
        [::std::mem::offset_of!(_ENetPeer, earliestTimeout) - 148usize];
    ["Offset of field: _ENetPeer::packetLossEpoch"]
        [::std::mem::offset_of!(_ENetPeer, packetLossEpoch) - 152usize];
    ["Offset of field: _ENetPeer::packetsSent"]
        [::std::mem::offset_of!(_ENetPeer, packetsSent) - 156usize];
    ["Offset of field: _ENetPeer::totalPacketsSent"]
        [::std::mem::offset_of!(_ENetPeer, totalPacketsSent) - 160usize];
    ["Offset of field: _ENetPeer::packetsLost"]
        [::std::mem::offset_of!(_ENetPeer, packetsLost) - 168usize];
    ["Offset of field: _ENetPeer::totalPacketsLost"]
        [::std::mem::offset_of!(_ENetPeer, totalPacketsLost) - 172usize];
    ["Offset of field: _ENetPeer::packetLoss"]
        [::std::mem::offset_of!(_ENetPeer, packetLoss) - 176usize];
    ["Offset of field: _ENetPeer::packetLossVariance"]
        [::std::mem::offset_of!(_ENetPeer, packetLossVariance) - 180usize];
    ["Offset of field: _ENetPeer::packetThrottle"]
        [::std::mem::offset_of!(_ENetPeer, packetThrottle) - 184usize];
    ["Offset of field: _ENetPeer::packetThrottleLimit"]
        [::std::mem::offset_of!(_ENetPeer, packetThrottleLimit) - 188usize];
    ["Offset of field: _ENetPeer::packetThrottleCounter"]
        [::std::mem::offset_of!(_ENetPeer, packetThrottleCounter) - 192usize];
    ["Offset of field: _ENetPeer::packetThrottleEpoch"]
        [::std::mem::offset_of!(_ENetPeer, packetThrottleEpoch) - 196usize];
    ["Offset of field: _ENetPeer::packetThrottleAcceleration"]
        [::std::mem::offset_of!(_ENetPeer, packetThrottleAcceleration) - 200usize];
    ["Offset of field: _ENetPeer::packetThrottleDeceleration"]
        [::std::mem::offset_of!(_ENetPeer, packetThrottleDeceleration) - 204usize];
    ["Offset of field: _ENetPeer::packetThrottleInterval"]
        [::std::mem::offset_of!(_ENetPeer, packetThrottleInterval) - 208usize];
    ["Offset of field: _ENetPeer::pingInterval"]
        [::std::mem::offset_of!(_ENetPeer, pingInterval) - 212usize];
    ["Offset of field: _ENetPeer::timeoutLimit"]
        [::std::mem::offset_of!(_ENetPeer, timeoutLimit) - 216usize];
    ["Offset of field: _ENetPeer::timeoutMinimum"]
        [::std::mem::offset_of!(_ENetPeer, timeoutMinimum) - 220usize];
    ["Offset of field: _ENetPeer::timeoutMaximum"]
        [::std::mem::offset_of!(_ENetPeer, timeoutMaximum) - 224usize];
    ["Offset of field: _ENetPeer::lastRoundTripTime"]
        [::std::mem::offset_of!(_ENetPeer, lastRoundTripTime) - 228usize];
    ["Offset of field: _ENetPeer::lowestRoundTripTime"]
        [::std::mem::offset_of!(_ENetPeer, lowestRoundTripTime) - 232usize];
    ["Offset of field: _ENetPeer::lastRoundTripTimeVariance"]
        [::std::mem::offset_of!(_ENetPeer, lastRoundTripTimeVariance) - 236usize];
    ["Offset of field: _ENetPeer::highestRoundTripTimeVariance"]
        [::std::mem::offset_of!(_ENetPeer, highestRoundTripTimeVariance) - 240usize];
    ["Offset of field: _ENetPeer::roundTripTime"]
        [::std::mem::offset_of!(_ENetPeer, roundTripTime) - 244usize];
    ["Offset of field: _ENetPeer::roundTripTimeVariance"]
        [::std::mem::offset_of!(_ENetPeer, roundTripTimeVariance) - 248usize];
    ["Offset of field: _ENetPeer::mtu"][::std::mem::offset_of!(_ENetPeer, mtu) - 252usize];
    ["Offset of field: _ENetPeer::windowSize"]
        [::std::mem::offset_of!(_ENetPeer, windowSize) - 256usize];
    ["Offset of field: _ENetPeer::reliableDataInTransit"]
        [::std::mem::offset_of!(_ENetPeer, reliableDataInTransit) - 260usize];
    ["Offset of field: _ENetPeer::outgoingReliableSequenceNumber"]
        [::std::mem::offset_of!(_ENetPeer, outgoingReliableSequenceNumber) - 264usize];
    ["Offset of field: _ENetPeer::acknowledgements"]
        [::std::mem::offset_of!(_ENetPeer, acknowledgements) - 272usize];
    ["Offset of field: _ENetPeer::sentReliableCommands"]
        [::std::mem::offset_of!(_ENetPeer, sentReliableCommands) - 288usize];
    ["Offset of field: _ENetPeer::sentUnreliableCommands"]
        [::std::mem::offset_of!(_ENetPeer, sentUnreliableCommands) - 304usize];
    ["Offset of field: _ENetPeer::outgoingReliableCommands"]
        [::std::mem::offset_of!(_ENetPeer, outgoingReliableCommands) - 320usize];
    ["Offset of field: _ENetPeer::outgoingUnreliableCommands"]
        [::std::mem::offset_of!(_ENetPeer, outgoingUnreliableCommands) - 336usize];
    ["Offset of field: _ENetPeer::dispatchedCommands"]
        [::std::mem::offset_of!(_ENetPeer, dispatchedCommands) - 352usize];
    ["Offset of field: _ENetPeer::needsDispatch"]
        [::std::mem::offset_of!(_ENetPeer, needsDispatch) - 368usize];
    ["Offset of field: _ENetPeer::incomingUnsequencedGroup"]
        [::std::mem::offset_of!(_ENetPeer, incomingUnsequencedGroup) - 372usize];
    ["Offset of field: _ENetPeer::outgoingUnsequencedGroup"]
        [::std::mem::offset_of!(_ENetPeer, outgoingUnsequencedGroup) - 374usize];
    ["Offset of field: _ENetPeer::unsequencedWindow"]
        [::std::mem::offset_of!(_ENetPeer, unsequencedWindow) - 376usize];
    ["Offset of field: _ENetPeer::eventData"]
        [::std::mem::offset_of!(_ENetPeer, eventData) - 504usize];
    ["Offset of field: _ENetPeer::totalWaitingData"]
        [::std::mem::offset_of!(_ENetPeer, totalWaitingData) - 512usize];
};
#[doc = " An ENet peer which data packets may be sent or received from.\n\n No fields should be modified unless otherwise specified."]
pub type ENetPeer = _ENetPeer;
#[doc = " An ENet packet compressor for compressing UDP packets before socket sends or receives."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ENetCompressor {
    #[doc = " Context data for the compressor. Must be non-NULL."]
    pub context: *mut ::std::os::raw::c_void,
    #[doc = " Compresses from inBuffers[0:inBufferCount-1], containing inLimit bytes, to outData, outputting at most outLimit bytes. Should return 0 on failure."]
    pub compress: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut ::std::os::raw::c_void,
            inBuffers: *const ENetBuffer,
            inBufferCount: usize,
            inLimit: usize,
            outData: *mut enet_uint8,
            outLimit: usize,
        ) -> usize,
    >,
    #[doc = " Decompresses from inData, containing inLimit bytes, to outData, outputting at most outLimit bytes. Should return 0 on failure."]
    pub decompress: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut ::std::os::raw::c_void,
            inData: *const enet_uint8,
            inLimit: usize,
            outData: *mut enet_uint8,
            outLimit: usize,
        ) -> usize,
    >,
    #[doc = " Destroys the context when compression is disabled or the host is destroyed. May be NULL."]
    pub destroy: ::std::option::Option<unsafe extern "C" fn(context: *mut ::std::os::raw::c_void)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ENetCompressor"][::std::mem::size_of::<_ENetCompressor>() - 32usize];
    ["Alignment of _ENetCompressor"][::std::mem::align_of::<_ENetCompressor>() - 8usize];
    ["Offset of field: _ENetCompressor::context"]
        [::std::mem::offset_of!(_ENetCompressor, context) - 0usize];
    ["Offset of field: _ENetCompressor::compress"]
        [::std::mem::offset_of!(_ENetCompressor, compress) - 8usize];
    ["Offset of field: _ENetCompressor::decompress"]
        [::std::mem::offset_of!(_ENetCompressor, decompress) - 16usize];
    ["Offset of field: _ENetCompressor::destroy"]
        [::std::mem::offset_of!(_ENetCompressor, destroy) - 24usize];
};
#[doc = " An ENet packet compressor for compressing UDP packets before socket sends or receives."]
pub type ENetCompressor = _ENetCompressor;
#[doc = " Callback that computes the checksum of the data held in buffers[0:bufferCount-1]"]
pub type ENetChecksumCallback = ::std::option::Option<
    unsafe extern "C" fn(buffers: *const ENetBuffer, bufferCount: usize) -> enet_uint32,
>;
#[doc = " Callback for intercepting received raw UDP packets. Should return 1 to intercept, 0 to ignore, or -1 to propagate an error."]
pub type ENetInterceptCallback = ::std::option::Option<
    unsafe extern "C" fn(
        host: *mut _ENetHost,
        event: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[doc = " An ENet host for communicating with peers.\n\n No fields should be modified unless otherwise stated.\n\n  @sa enet_host_create()\n  @sa enet_host_destroy()\n  @sa enet_host_connect()\n  @sa enet_host_service()\n  @sa enet_host_flush()\n  @sa enet_host_broadcast()\n  @sa enet_host_compress()\n  @sa enet_host_channel_limit()\n  @sa enet_host_bandwidth_limit()\n  @sa enet_host_bandwidth_throttle()"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ENetHost {
    pub socket: ENetSocket,
    #[doc = "< Internet address of the host"]
    pub address: ENetAddress,
    #[doc = "< downstream bandwidth of the host"]
    pub incomingBandwidth: enet_uint32,
    #[doc = "< upstream bandwidth of the host"]
    pub outgoingBandwidth: enet_uint32,
    pub bandwidthThrottleEpoch: enet_uint32,
    pub mtu: enet_uint32,
    pub randomSeed: enet_uint32,
    pub recalculateBandwidthLimits: ::std::os::raw::c_int,
    #[doc = "< array of peers allocated for this host"]
    pub peers: *mut ENetPeer,
    #[doc = "< number of peers allocated for this host"]
    pub peerCount: usize,
    #[doc = "< maximum number of channels allowed for connected peers"]
    pub channelLimit: usize,
    pub serviceTime: enet_uint32,
    pub dispatchQueue: ENetList,
    pub continueSending: ::std::os::raw::c_int,
    pub packetSize: usize,
    pub headerFlags: enet_uint16,
    pub commands: [ENetProtocol; 32usize],
    pub commandCount: usize,
    pub buffers: [ENetBuffer; 65usize],
    pub bufferCount: usize,
    #[doc = "< callback the user can set to enable packet checksums for this host"]
    pub checksum: ENetChecksumCallback,
    pub compressor: ENetCompressor,
    pub packetData: [[enet_uint8; 4096usize]; 2usize],
    pub receivedAddress: ENetAddress,
    pub receivedData: *mut enet_uint8,
    pub receivedDataLength: usize,
    #[doc = "< total data sent, user should reset to 0 as needed to prevent overflow"]
    pub totalSentData: enet_uint32,
    #[doc = "< total UDP packets sent, user should reset to 0 as needed to prevent overflow"]
    pub totalSentPackets: enet_uint32,
    #[doc = "< total data received, user should reset to 0 as needed to prevent overflow"]
    pub totalReceivedData: enet_uint32,
    #[doc = "< total UDP packets received, user should reset to 0 as needed to prevent overflow"]
    pub totalReceivedPackets: enet_uint32,
    #[doc = "< callback the user can set to intercept received raw UDP packets"]
    pub intercept: ENetInterceptCallback,
    pub connectedPeers: usize,
    pub bandwidthLimitedPeers: usize,
    #[doc = "< optional number of allowed peers from duplicate IPs, defaults to ENET_PROTOCOL_MAXIMUM_PEER_ID"]
    pub duplicatePeers: usize,
    #[doc = "< the maximum allowable packet size that may be sent or received on a peer"]
    pub maximumPacketSize: usize,
    #[doc = "< the maximum aggregate amount of buffer space a peer may use waiting for packets to be delivered"]
    pub maximumWaitingData: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ENetHost"][::std::mem::size_of::<_ENetHost>() - 11056usize];
    ["Alignment of _ENetHost"][::std::mem::align_of::<_ENetHost>() - 8usize];
    ["Offset of field: _ENetHost::socket"][::std::mem::offset_of!(_ENetHost, socket) - 0usize];
    ["Offset of field: _ENetHost::address"][::std::mem::offset_of!(_ENetHost, address) - 8usize];
    ["Offset of field: _ENetHost::incomingBandwidth"]
        [::std::mem::offset_of!(_ENetHost, incomingBandwidth) - 28usize];
    ["Offset of field: _ENetHost::outgoingBandwidth"]
        [::std::mem::offset_of!(_ENetHost, outgoingBandwidth) - 32usize];
    ["Offset of field: _ENetHost::bandwidthThrottleEpoch"]
        [::std::mem::offset_of!(_ENetHost, bandwidthThrottleEpoch) - 36usize];
    ["Offset of field: _ENetHost::mtu"][::std::mem::offset_of!(_ENetHost, mtu) - 40usize];
    ["Offset of field: _ENetHost::randomSeed"]
        [::std::mem::offset_of!(_ENetHost, randomSeed) - 44usize];
    ["Offset of field: _ENetHost::recalculateBandwidthLimits"]
        [::std::mem::offset_of!(_ENetHost, recalculateBandwidthLimits) - 48usize];
    ["Offset of field: _ENetHost::peers"][::std::mem::offset_of!(_ENetHost, peers) - 56usize];
    ["Offset of field: _ENetHost::peerCount"]
        [::std::mem::offset_of!(_ENetHost, peerCount) - 64usize];
    ["Offset of field: _ENetHost::channelLimit"]
        [::std::mem::offset_of!(_ENetHost, channelLimit) - 72usize];
    ["Offset of field: _ENetHost::serviceTime"]
        [::std::mem::offset_of!(_ENetHost, serviceTime) - 80usize];
    ["Offset of field: _ENetHost::dispatchQueue"]
        [::std::mem::offset_of!(_ENetHost, dispatchQueue) - 88usize];
    ["Offset of field: _ENetHost::continueSending"]
        [::std::mem::offset_of!(_ENetHost, continueSending) - 104usize];
    ["Offset of field: _ENetHost::packetSize"]
        [::std::mem::offset_of!(_ENetHost, packetSize) - 112usize];
    ["Offset of field: _ENetHost::headerFlags"]
        [::std::mem::offset_of!(_ENetHost, headerFlags) - 120usize];
    ["Offset of field: _ENetHost::commands"]
        [::std::mem::offset_of!(_ENetHost, commands) - 122usize];
    ["Offset of field: _ENetHost::commandCount"]
        [::std::mem::offset_of!(_ENetHost, commandCount) - 1664usize];
    ["Offset of field: _ENetHost::buffers"][::std::mem::offset_of!(_ENetHost, buffers) - 1672usize];
    ["Offset of field: _ENetHost::bufferCount"]
        [::std::mem::offset_of!(_ENetHost, bufferCount) - 2712usize];
    ["Offset of field: _ENetHost::checksum"]
        [::std::mem::offset_of!(_ENetHost, checksum) - 2720usize];
    ["Offset of field: _ENetHost::compressor"]
        [::std::mem::offset_of!(_ENetHost, compressor) - 2728usize];
    ["Offset of field: _ENetHost::packetData"]
        [::std::mem::offset_of!(_ENetHost, packetData) - 2760usize];
    ["Offset of field: _ENetHost::receivedAddress"]
        [::std::mem::offset_of!(_ENetHost, receivedAddress) - 10952usize];
    ["Offset of field: _ENetHost::receivedData"]
        [::std::mem::offset_of!(_ENetHost, receivedData) - 10976usize];
    ["Offset of field: _ENetHost::receivedDataLength"]
        [::std::mem::offset_of!(_ENetHost, receivedDataLength) - 10984usize];
    ["Offset of field: _ENetHost::totalSentData"]
        [::std::mem::offset_of!(_ENetHost, totalSentData) - 10992usize];
    ["Offset of field: _ENetHost::totalSentPackets"]
        [::std::mem::offset_of!(_ENetHost, totalSentPackets) - 10996usize];
    ["Offset of field: _ENetHost::totalReceivedData"]
        [::std::mem::offset_of!(_ENetHost, totalReceivedData) - 11000usize];
    ["Offset of field: _ENetHost::totalReceivedPackets"]
        [::std::mem::offset_of!(_ENetHost, totalReceivedPackets) - 11004usize];
    ["Offset of field: _ENetHost::intercept"]
        [::std::mem::offset_of!(_ENetHost, intercept) - 11008usize];
    ["Offset of field: _ENetHost::connectedPeers"]
        [::std::mem::offset_of!(_ENetHost, connectedPeers) - 11016usize];
    ["Offset of field: _ENetHost::bandwidthLimitedPeers"]
        [::std::mem::offset_of!(_ENetHost, bandwidthLimitedPeers) - 11024usize];
    ["Offset of field: _ENetHost::duplicatePeers"]
        [::std::mem::offset_of!(_ENetHost, duplicatePeers) - 11032usize];
    ["Offset of field: _ENetHost::maximumPacketSize"]
        [::std::mem::offset_of!(_ENetHost, maximumPacketSize) - 11040usize];
    ["Offset of field: _ENetHost::maximumWaitingData"]
        [::std::mem::offset_of!(_ENetHost, maximumWaitingData) - 11048usize];
};
#[doc = " An ENet host for communicating with peers.\n\n No fields should be modified unless otherwise stated.\n\n  @sa enet_host_create()\n  @sa enet_host_destroy()\n  @sa enet_host_connect()\n  @sa enet_host_service()\n  @sa enet_host_flush()\n  @sa enet_host_broadcast()\n  @sa enet_host_compress()\n  @sa enet_host_channel_limit()\n  @sa enet_host_bandwidth_limit()\n  @sa enet_host_bandwidth_throttle()"]
pub type ENetHost = _ENetHost;
#[doc = " no event occurred within the specified time limit"]
pub const _ENetEventType_ENET_EVENT_TYPE_NONE: _ENetEventType = 0;
#[doc = " a connection request initiated by enet_host_connect has completed.\n The peer field contains the peer which successfully connected."]
pub const _ENetEventType_ENET_EVENT_TYPE_CONNECT: _ENetEventType = 1;
#[doc = " a peer has disconnected.  This event is generated on a successful\n completion of a disconnect initiated by enet_peer_disconnect, if\n a peer has timed out.  The peer field contains the peer\n which disconnected. The data field contains user supplied data\n describing the disconnection, or 0, if none is available."]
pub const _ENetEventType_ENET_EVENT_TYPE_DISCONNECT: _ENetEventType = 2;
#[doc = " a packet has been received from a peer.  The peer field specifies the\n peer which sent the packet.  The channelID field specifies the channel\n number upon which the packet was received.  The packet field contains\n the packet that was received; this packet must be destroyed with\n enet_packet_destroy after use."]
pub const _ENetEventType_ENET_EVENT_TYPE_RECEIVE: _ENetEventType = 3;
#[doc = " a peer is disconnected because the host didn't receive the acknowledgment\n packet within certain maximum time out. The reason could be because of bad\n network connection or  host crashed."]
pub const _ENetEventType_ENET_EVENT_TYPE_DISCONNECT_TIMEOUT: _ENetEventType = 4;
#[doc = " An ENet event type, as specified in @ref ENetEvent."]
pub type _ENetEventType = ::std::os::raw::c_int;
#[doc = " An ENet event type, as specified in @ref ENetEvent."]
pub use self::_ENetEventType as ENetEventType;
#[doc = " An ENet event as returned by enet_host_service().\n\n @sa enet_host_service"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ENetEvent {
    #[doc = "< type of the event"]
    pub type_: ENetEventType,
    #[doc = "< peer that generated a connect, disconnect or receive event"]
    pub peer: *mut ENetPeer,
    #[doc = "< channel on the peer that generated the event, if appropriate"]
    pub channelID: enet_uint8,
    #[doc = "< data associated with the event, if appropriate"]
    pub data: enet_uint32,
    #[doc = "< packet associated with the event, if appropriate"]
    pub packet: *mut ENetPacket,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ENetEvent"][::std::mem::size_of::<_ENetEvent>() - 32usize];
    ["Alignment of _ENetEvent"][::std::mem::align_of::<_ENetEvent>() - 8usize];
    ["Offset of field: _ENetEvent::type_"][::std::mem::offset_of!(_ENetEvent, type_) - 0usize];
    ["Offset of field: _ENetEvent::peer"][::std::mem::offset_of!(_ENetEvent, peer) - 8usize];
    ["Offset of field: _ENetEvent::channelID"]
        [::std::mem::offset_of!(_ENetEvent, channelID) - 16usize];
    ["Offset of field: _ENetEvent::data"][::std::mem::offset_of!(_ENetEvent, data) - 20usize];
    ["Offset of field: _ENetEvent::packet"][::std::mem::offset_of!(_ENetEvent, packet) - 24usize];
};
#[doc = " An ENet event as returned by enet_host_service().\n\n @sa enet_host_service"]
pub type ENetEvent = _ENetEvent;
unsafe extern "C" {
    #[doc = " Initializes ENet globally.  Must be called prior to using any functions in ENet.\n @returns 0 on success, < 0 on failure"]
    pub fn enet_initialize() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Initializes ENet globally and supplies user-overridden callbacks. Must be called prior to using any functions in ENet. Do not use enet_initialize() if you use this variant. Make sure the ENetCallbacks structure is zeroed out so that any additional callbacks added in future versions will be properly ignored.\n\n @param version the constant ENET_VERSION should be supplied so ENet knows which version of ENetCallbacks struct to use\n @param inits user-overridden callbacks where any NULL callbacks will use ENet's defaults\n @returns 0 on success, < 0 on failure"]
    pub fn enet_initialize_with_callbacks(
        version: ENetVersion,
        inits: *const ENetCallbacks,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Shuts down ENet globally.  Should be called when a program that has initialized ENet exits."]
    pub fn enet_deinitialize();
}
unsafe extern "C" {
    #[doc = " Gives the linked version of the ENet library.\n @returns the version number"]
    pub fn enet_linked_version() -> ENetVersion;
}
unsafe extern "C" {
    #[doc = " Returns the monotonic time in milliseconds. Its initial value is unspecified unless otherwise set."]
    pub fn enet_time_get() -> enet_uint32;
}
unsafe extern "C" {
    #[doc = " ENet socket functions"]
    pub fn enet_socket_create(arg1: ENetSocketType) -> ENetSocket;
}
unsafe extern "C" {
    pub fn enet_socket_bind(arg1: ENetSocket, arg2: *const ENetAddress) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn enet_socket_get_address(
        arg1: ENetSocket,
        arg2: *mut ENetAddress,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn enet_socket_listen(
        arg1: ENetSocket,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn enet_socket_accept(arg1: ENetSocket, arg2: *mut ENetAddress) -> ENetSocket;
}
unsafe extern "C" {
    pub fn enet_socket_connect(arg1: ENetSocket, arg2: *const ENetAddress)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn enet_socket_send(
        arg1: ENetSocket,
        arg2: *const ENetAddress,
        arg3: *const ENetBuffer,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn enet_socket_receive(
        arg1: ENetSocket,
        arg2: *mut ENetAddress,
        arg3: *mut ENetBuffer,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn enet_socket_wait(
        arg1: ENetSocket,
        arg2: *mut enet_uint32,
        arg3: enet_uint64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn enet_socket_set_option(
        arg1: ENetSocket,
        arg2: ENetSocketOption,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn enet_socket_get_option(
        arg1: ENetSocket,
        arg2: ENetSocketOption,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn enet_socket_shutdown(
        arg1: ENetSocket,
        arg2: ENetSocketShutdown,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn enet_socket_destroy(arg1: ENetSocket);
}
unsafe extern "C" {
    pub fn enet_socketset_select(
        arg1: ENetSocket,
        arg2: *mut ENetSocketSet,
        arg3: *mut ENetSocketSet,
        arg4: enet_uint32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Attempts to parse the printable form of the IP address in the parameter hostName\nand sets the host field in the address parameter if successful.\n@param address destination to store the parsed IP address\n@param hostName IP address to parse\n@retval 0 on success\n@retval < 0 on failure\n@returns the address of the given hostName in address on success"]
    pub fn enet_address_set_host_ip_old(
        address: *mut ENetAddress,
        hostName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Attempts to resolve the host named by the parameter hostName and sets\nthe host field in the address parameter if successful.\n@param address destination to store resolved address\n@param hostName host name to lookup\n@retval 0 on success\n@retval < 0 on failure\n@returns the address of the given hostName in address on success"]
    pub fn enet_address_set_host_old(
        address: *mut ENetAddress,
        hostName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Gives the printable form of the IP address specified in the address parameter.\n@param address    address printed\n@param hostName   destination for name, must not be NULL\n@param nameLength maximum length of hostName.\n@returns the null-terminated name of the host in hostName on success\n@retval 0 on success\n@retval < 0 on failure"]
    pub fn enet_address_get_host_ip_old(
        address: *const ENetAddress,
        hostName: *mut ::std::os::raw::c_char,
        nameLength: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Attempts to do a reverse lookup of the host field in the address parameter.\n@param address    address used for reverse lookup\n@param hostName   destination for name, must not be NULL\n@param nameLength maximum length of hostName.\n@returns the null-terminated name of the host in hostName on success\n@retval 0 on success\n@retval < 0 on failure"]
    pub fn enet_address_get_host_old(
        address: *const ENetAddress,
        hostName: *mut ::std::os::raw::c_char,
        nameLength: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn enet_address_set_host_ip_new(
        address: *mut ENetAddress,
        hostName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn enet_address_set_host_new(
        address: *mut ENetAddress,
        hostName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn enet_address_get_host_ip_new(
        address: *const ENetAddress,
        hostName: *mut ::std::os::raw::c_char,
        nameLength: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn enet_address_get_host_new(
        address: *const ENetAddress,
        hostName: *mut ::std::os::raw::c_char,
        nameLength: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn enet_host_get_peers_count(arg1: *mut ENetHost) -> enet_uint32;
}
unsafe extern "C" {
    pub fn enet_host_get_packets_sent(arg1: *mut ENetHost) -> enet_uint32;
}
unsafe extern "C" {
    pub fn enet_host_get_packets_received(arg1: *mut ENetHost) -> enet_uint32;
}
unsafe extern "C" {
    pub fn enet_host_get_bytes_sent(arg1: *mut ENetHost) -> enet_uint32;
}
unsafe extern "C" {
    pub fn enet_host_get_bytes_received(arg1: *mut ENetHost) -> enet_uint32;
}
unsafe extern "C" {
    pub fn enet_host_get_received_data(
        arg1: *mut ENetHost,
        data: *mut *mut enet_uint8,
    ) -> enet_uint32;
}
unsafe extern "C" {
    pub fn enet_host_get_mtu(arg1: *mut ENetHost) -> enet_uint32;
}
unsafe extern "C" {
    pub fn enet_peer_get_id(arg1: *mut ENetPeer) -> enet_uint32;
}
unsafe extern "C" {
    pub fn enet_peer_get_ip(
        arg1: *mut ENetPeer,
        ip: *mut ::std::os::raw::c_char,
        ipLength: usize,
    ) -> enet_uint32;
}
unsafe extern "C" {
    pub fn enet_peer_get_port(arg1: *mut ENetPeer) -> enet_uint16;
}
unsafe extern "C" {
    pub fn enet_peer_get_rtt(arg1: *mut ENetPeer) -> enet_uint32;
}
unsafe extern "C" {
    pub fn enet_peer_get_packets_sent(arg1: *mut ENetPeer) -> enet_uint64;
}
unsafe extern "C" {
    pub fn enet_peer_get_packets_lost(arg1: *mut ENetPeer) -> enet_uint32;
}
unsafe extern "C" {
    pub fn enet_peer_get_bytes_sent(arg1: *mut ENetPeer) -> enet_uint64;
}
unsafe extern "C" {
    pub fn enet_peer_get_bytes_received(arg1: *mut ENetPeer) -> enet_uint64;
}
unsafe extern "C" {
    pub fn enet_peer_get_state(arg1: *mut ENetPeer) -> ENetPeerState;
}
unsafe extern "C" {
    pub fn enet_peer_get_data(arg1: *mut ENetPeer) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn enet_peer_set_data(arg1: *mut ENetPeer, arg2: *const ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn enet_packet_get_data(arg1: *mut ENetPacket) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn enet_packet_get_length(arg1: *mut ENetPacket) -> enet_uint32;
}
unsafe extern "C" {
    pub fn enet_packet_set_free_callback(arg1: *mut ENetPacket, arg2: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn enet_packet_create_offset(
        arg1: *const ::std::os::raw::c_void,
        arg2: usize,
        arg3: usize,
        arg4: enet_uint32,
    ) -> *mut ENetPacket;
}
unsafe extern "C" {
    pub fn enet_crc32(arg1: *const ENetBuffer, arg2: usize) -> enet_uint32;
}
unsafe extern "C" {
    pub fn enet_host_create(
        arg1: *const ENetAddress,
        arg2: usize,
        arg3: usize,
        arg4: enet_uint32,
        arg5: enet_uint32,
    ) -> *mut ENetHost;
}
unsafe extern "C" {
    pub fn enet_host_destroy(arg1: *mut ENetHost);
}
unsafe extern "C" {
    pub fn enet_host_connect(
        arg1: *mut ENetHost,
        arg2: *const ENetAddress,
        arg3: usize,
        arg4: enet_uint32,
    ) -> *mut ENetPeer;
}
unsafe extern "C" {
    pub fn enet_host_check_events(
        arg1: *mut ENetHost,
        arg2: *mut ENetEvent,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn enet_host_service(
        arg1: *mut ENetHost,
        arg2: *mut ENetEvent,
        arg3: enet_uint32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn enet_host_send_raw(
        arg1: *mut ENetHost,
        arg2: *const ENetAddress,
        arg3: *mut enet_uint8,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn enet_host_send_raw_ex(
        host: *mut ENetHost,
        address: *const ENetAddress,
        data: *mut enet_uint8,
        skipBytes: usize,
        bytesToSend: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn enet_host_set_intercept(arg1: *mut ENetHost, arg2: ENetInterceptCallback);
}
unsafe extern "C" {
    pub fn enet_host_flush(arg1: *mut ENetHost);
}
unsafe extern "C" {
    pub fn enet_host_broadcast(arg1: *mut ENetHost, arg2: enet_uint8, arg3: *mut ENetPacket);
}
unsafe extern "C" {
    pub fn enet_host_compress(arg1: *mut ENetHost, arg2: *const ENetCompressor);
}
unsafe extern "C" {
    pub fn enet_host_channel_limit(arg1: *mut ENetHost, arg2: usize);
}
unsafe extern "C" {
    pub fn enet_host_bandwidth_limit(arg1: *mut ENetHost, arg2: enet_uint32, arg3: enet_uint32);
}
unsafe extern "C" {
    pub fn enet_host_bandwidth_throttle(arg1: *mut ENetHost);
}
unsafe extern "C" {
    pub fn enet_host_random_seed() -> enet_uint64;
}
unsafe extern "C" {
    pub fn enet_peer_send(
        arg1: *mut ENetPeer,
        arg2: enet_uint8,
        arg3: *mut ENetPacket,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn enet_peer_receive(arg1: *mut ENetPeer, channelID: *mut enet_uint8) -> *mut ENetPacket;
}
unsafe extern "C" {
    pub fn enet_peer_ping(arg1: *mut ENetPeer);
}
unsafe extern "C" {
    pub fn enet_peer_ping_interval(arg1: *mut ENetPeer, arg2: enet_uint32);
}
unsafe extern "C" {
    pub fn enet_peer_timeout(
        arg1: *mut ENetPeer,
        arg2: enet_uint32,
        arg3: enet_uint32,
        arg4: enet_uint32,
    );
}
unsafe extern "C" {
    pub fn enet_peer_reset(arg1: *mut ENetPeer);
}
unsafe extern "C" {
    pub fn enet_peer_disconnect(arg1: *mut ENetPeer, arg2: enet_uint32);
}
unsafe extern "C" {
    pub fn enet_peer_disconnect_now(arg1: *mut ENetPeer, arg2: enet_uint32);
}
unsafe extern "C" {
    pub fn enet_peer_disconnect_later(arg1: *mut ENetPeer, arg2: enet_uint32);
}
unsafe extern "C" {
    pub fn enet_peer_throttle_configure(
        arg1: *mut ENetPeer,
        arg2: enet_uint32,
        arg3: enet_uint32,
        arg4: enet_uint32,
    );
}
unsafe extern "C" {
    pub fn enet_peer_throttle(arg1: *mut ENetPeer, arg2: enet_uint32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn enet_peer_reset_queues(arg1: *mut ENetPeer);
}
unsafe extern "C" {
    pub fn enet_peer_setup_outgoing_command(arg1: *mut ENetPeer, arg2: *mut ENetOutgoingCommand);
}
unsafe extern "C" {
    pub fn enet_peer_queue_outgoing_command(
        arg1: *mut ENetPeer,
        arg2: *const ENetProtocol,
        arg3: *mut ENetPacket,
        arg4: enet_uint32,
        arg5: enet_uint16,
    ) -> *mut ENetOutgoingCommand;
}
unsafe extern "C" {
    pub fn enet_peer_queue_incoming_command(
        arg1: *mut ENetPeer,
        arg2: *const ENetProtocol,
        arg3: *const ::std::os::raw::c_void,
        arg4: usize,
        arg5: enet_uint32,
        arg6: enet_uint32,
    ) -> *mut ENetIncomingCommand;
}
unsafe extern "C" {
    pub fn enet_peer_queue_acknowledgement(
        arg1: *mut ENetPeer,
        arg2: *const ENetProtocol,
        arg3: enet_uint16,
    ) -> *mut ENetAcknowledgement;
}
unsafe extern "C" {
    pub fn enet_peer_dispatch_incoming_unreliable_commands(
        arg1: *mut ENetPeer,
        arg2: *mut ENetChannel,
    );
}
unsafe extern "C" {
    pub fn enet_peer_dispatch_incoming_reliable_commands(
        arg1: *mut ENetPeer,
        arg2: *mut ENetChannel,
    );
}
unsafe extern "C" {
    pub fn enet_peer_on_connect(arg1: *mut ENetPeer);
}
unsafe extern "C" {
    pub fn enet_peer_on_disconnect(arg1: *mut ENetPeer);
}
unsafe extern "C" {
    pub fn enet_protocol_command_size(arg1: enet_uint8) -> usize;
}
